{# xjit_create.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Create JIT Order Record{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="fw-bold text-primary">
            <i class="fas fa-plus-circle me-2"></i>
            Nouvelle commande JIT
        </h1>
        <a href="{{ path('odoo_jit_order') }}" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Retour
        </a>
    </div>

    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} alert-dismissible fade show">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <h5 class="card-title mb-0">Informations de la commande</h5>
        </div>
        <div class="card-body">
            <form method="POST" action="{{ path('odoo_jit_order_create') }}" id="order-form">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="name" class="form-label">Nom</label>
                            <input type="text" id="name" name="name" class="form-control" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="priority" class="form-label">Priorité</label>
                            <div class="form-check">
                                <input type="checkbox" id="priority" name="priority" class="form-check-input">
                                <label class="form-check-label" for="priority">Commande prioritaire</label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="partner_id" class="form-label">Client</label>
                            <div class="input-group">
                                <input type="text" id="partner_search" class="form-control" placeholder="Rechercher un client...">
                                <button class="btn btn-outline-secondary" type="button" id="search-client-btn">
                                    <i class="fas fa-search"></i>
                                </button>
                                <input type="hidden" id="partner_id" name="partner_id">
                            </div>
                            <small id="selected-partner-name" class="form-text">
                                Aucun client sélectionné
                            </small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="shipping_instruction" class="form-label">Instruction de livraison</label>
                            <textarea id="shipping_instruction" name="shipping_instruction" class="form-control" required></textarea>
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-12">
                        <h5 class="mb-3">Bin IDs</h5>
                        
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" id="bin_search" class="form-control" placeholder="Rechercher un Bin ID...">
                                <button class="btn btn-outline-secondary" type="button" id="search-bin-btn">
                                    <i class="fas fa-search"></i>
                                </button>
                                <button type="button" id="add-bin-btn" class="btn btn-secondary" disabled>
                                    <i class="fas fa-plus"></i> Ajouter
                                </button>
                            </div>
                            <small id="selected-bin-name" class="form-text">
                                Aucun Bin sélectionné
                            </small>
                        </div>
                        
                        <div class="table-responsive">
                            <table id="bin-table" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Bin ID</th>
                                        <th>Quantité</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="bin-table-body">
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="alert alert-info" id="no-bins-message">
                            <i class="fas fa-info-circle me-2"></i>
                            Aucun Bin ID ajouté pour le moment
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-end">
                    <input type="hidden" name="bin_ids" id="bin_ids_json" value="{}">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> Créer la commande
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal pour la recherche de client -->
<div class="modal fade" id="clientSearchModal" tabindex="-1" aria-labelledby="clientSearchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clientSearchModalLabel">Résultats de recherche</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="client-results"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour la recherche de Bin ID -->
<div class="modal fade" id="binSearchModal" tabindex="-1" aria-labelledby="binSearchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="binSearchModalLabel">Résultats de recherche</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="bin-results"></div>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const binIds = new Map(); // Pour stocker les Bin IDs et leurs quantités
            const binTable = document.getElementById('bin-table');
            const binTableBody = document.getElementById('bin-table-body');
            const noBinsMessage = document.getElementById('no-bins-message');
            let selectedBinId = null;
            let selectedBinName = null;
            
            // Fonctions utilitaires
            function updateBinIdsInput() {
                const binIdsObject = {};
                binIds.forEach((value, key) => {
                    binIdsObject[key] = value;
                });
                document.getElementById('bin_ids_json').value = JSON.stringify(binIdsObject);
            }
            
            function updateBinTable() {
                binTableBody.innerHTML = '';
                
                if (binIds.size === 0) {
                    noBinsMessage.style.display = 'block';
                    return;
                }
                
                noBinsMessage.style.display = 'none';
                
                binIds.forEach((quantity, binName) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${binName}</td>
                        <td>
                            <input type="number" class="form-control bin-quantity" 
                                   data-bin="${binName}" value="${quantity}" min="1">
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-bin" data-bin="${binName}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    binTableBody.appendChild(row);
                });
                
                // Ajouter les écouteurs d'événements pour les quantités
                document.querySelectorAll('.bin-quantity').forEach(input => {
                    input.addEventListener('change', function() {
                        const binName = this.dataset.bin;
                        const quantity = parseInt(this.value) || 1;
                        binIds.set(binName, quantity);
                        updateBinIdsInput();
                    });
                });
                
                // Ajouter les écouteurs d'événements pour la suppression
                document.querySelectorAll('.remove-bin').forEach(button => {
                    button.addEventListener('click', function() {
                        const binName = this.dataset.bin;
                        binIds.delete(binName);
                        updateBinIdsInput();
                        updateBinTable();
                    });
                });
            }
            
            // Logique de recherche client
            document.getElementById('search-client-btn').addEventListener('click', function() {
                const searchTerm = document.getElementById('partner_search').value;
                if (searchTerm.length < 2) {
                    alert("Veuillez saisir au moins 2 caractères");
                    return;
                }
                
                fetch(`/api/search/client?term=${encodeURIComponent(searchTerm)}`)
                    .then(response => response.json())
                    .then(clients => {
                        let html = '<div class="list-group">';
                        clients.forEach(client => {
                            html += `<a href="#" class="list-group-item list-group-item-action client-result" 
                                     data-id="${client.id}" data-name="${client.name}">${client.name}</a>`;
                        });
                        html += '</div>';
                        
                        document.getElementById('client-results').innerHTML = html;
                        new bootstrap.Modal(document.getElementById('clientSearchModal')).show();
                    });
            });
            
            // Sélection d'un client
            document.getElementById('client-results').addEventListener('click', function(e) {
                if (e.target.classList.contains('client-result')) {
                    e.preventDefault();
                    const id = e.target.dataset.id;
                    const name = e.target.dataset.name;
                    document.getElementById('partner_id').value = id;
                    document.getElementById('selected-partner-name').textContent = `Client sélectionné: ${name}`;
                    bootstrap.Modal.getInstance(document.getElementById('clientSearchModal')).hide();
                }
            });
            
            // Recherche de Bin ID
            document.getElementById('search-bin-btn').addEventListener('click', function() {
                const searchTerm = document.getElementById('bin_search').value;
                if (searchTerm.length < 2) {
                    alert("Veuillez saisir au moins 2 caractères");
                    return;
                }
                
                // On cherche dans la table aa.just.in.time qui contient les Bin IDs
                fetch(`/api/search/bin?term=${encodeURIComponent(searchTerm)}`)
                    .then(response => response.json())
                    .then(bins => {
                        let html = '<div class="list-group">';
                        if (bins.length === 0) {
                            html += '<div class="list-group-item">Aucun résultat trouvé</div>';
                        } else {
                            bins.forEach(bin => {
                                html += `<a href="#" class="list-group-item list-group-item-action bin-result" 
                                         data-id="${bin.id}" data-name="${bin.name}">${bin.name}</a>`;
                            });
                        }
                        html += '</div>';
                        
                        document.getElementById('bin-results').innerHTML = html;
                        new bootstrap.Modal(document.getElementById('binSearchModal')).show();
                    })
                    .catch(error => {
                        console.error('Erreur lors de la recherche:', error);
                        alert('Erreur lors de la recherche. Veuillez réessayer.');
                    });
            });
            
            // Sélection d'un Bin ID
            document.getElementById('bin-results').addEventListener('click', function(e) {
                if (e.target.classList.contains('bin-result')) {
                    e.preventDefault();
                    selectedBinId = e.target.dataset.id;
                    selectedBinName = e.target.dataset.name;
                    document.getElementById('selected-bin-name').textContent = `Bin sélectionné: ${selectedBinName}`;
                    document.getElementById('add-bin-btn').disabled = false;
                    bootstrap.Modal.getInstance(document.getElementById('binSearchModal')).hide();
                }
            });
            
            // Ajouter un Bin ID
            document.getElementById('add-bin-btn').addEventListener('click', function() {
                if (!selectedBinName) return;
                
                if (binIds.has(selectedBinName)) {
                    const currentQty = binIds.get(selectedBinName);
                    binIds.set(selectedBinName, currentQty + 1);
                } else {
                    binIds.set(selectedBinName, 1);
                }
                
                updateBinIdsInput();
                updateBinTable();
                
                // Réinitialiser la sélection
                selectedBinId = null;
                selectedBinName = null;
                document.getElementById('selected-bin-name').textContent = 'Aucun Bin sélectionné';
                document.getElementById('add-bin-btn').disabled = true;
            });
            
            // Validation du formulaire
            document.getElementById('order-form').addEventListener('submit', function(e) {
                const partnerId = document.getElementById('partner_id').value;
                
                if (!partnerId) {
                    e.preventDefault();
                    alert('Veuillez sélectionner un client');
                    return;
                }
                
                if (binIds.size === 0) {
                    e.preventDefault();
                    alert('Veuillez ajouter au moins un Bin ID');
                    return;
                }
            });
            
            // Initialisation
            updateBinTable();
        });
    </script>
{% endblock %}
